name: Main Workflow

on:
  push:
    branches: [ main, master, develop, 'releases/**' ]
    paths-ignore:
      - 'compile_commands/**'   # prevent CI loop when we commit compile_commands.json
  pull_request:
    types: [ opened, synchronize, reopened ]

permissions:
  contents: write
  pull-requests: write

jobs:
  sonarqube:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}   # cmake/ninja come from /mingw64/bin

    # Read Sonar coordinates from Secrets first, then Repository Variables.
    # SONAR_TOKEN must be in Secrets.
    env:
      BUILD_DIR: build
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SC_HOST: ${{ secrets.SONAR_HOST_URL || vars.SONAR_HOST_URL || 'https://sonarcloud.io' }}
      SC_ORG:  ${{ secrets.SONAR_ORGANIZATION || vars.SONAR_ORGANIZATION }}
      SC_KEY:  ${{ secrets.SONAR_PROJECT_KEY   || vars.SONAR_PROJECT_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install MSYS2 toolchain
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-binutils
            mingw-w64-x86_64-sqlite3

      - name: Configure (Ninja, export compile_commands.json)
        run: >
          cmake -S . -B "${BUILD_DIR}" -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          -DWITH_BOOST=OFF
          -DSOCI_TESTS=OFF
          -DSOCI_SHARED=OFF
          -DSOCI_STATIC=ON
          -DSOCI_EMPTY=ON
          -DSOCI_SQLITE3=ON
          -DSOCI_DB2=OFF
          -DSOCI_FIREBIRD=OFF
          -DSOCI_ORACLE=OFF
          -DSOCI_ODBC=OFF
          -DSOCI_POSTGRESQL=OFF
          -DSOCI_MYSQL=OFF

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release -j2

      - name: Test (none expected)
        run: ctest --output-on-failure -C Release --test-dir "${BUILD_DIR}" || true

      # --- Produce full & stripped bundles for Ghidra ---
      - name: Package (full + stripped + symbols)
        run: |
          set -euo pipefail

          mkdir -p out/full/bin out/full/lib out/full/include
          mkdir -p out/stripped/bin out/stripped/lib
          mkdir -p out/symbols

          # Headers
          [ -d include ] && cp -R include/ out/full/include/ || true

          # Static libs (SOCI core/backends as built)
          find "${BUILD_DIR}" -maxdepth 4 -type f -name 'libsoci*.a' -not -path '*/CMakeFiles/*' -exec cp -f {} out/full/lib/ \; || true

          # DLL/EXE if any examples/tools are built
          find "${BUILD_DIR}" -type f \( -iname '*.exe' -o -iname '*.dll' \) -not -path '*/CMakeFiles/*' -exec cp -f {} out/full/bin/ \; || true

          # Stripped copies
          cp -f out/full/lib/* out/stripped/lib/ 2>/dev/null || true
          cp -f out/full/bin/* out/stripped/bin/ 2>/dev/null || true

          # Strip static libs
          find out/stripped/lib -type f -name '*.a' -exec strip -g {} \; || true

          # Strip EXE/DLL & create .debug companions
          shopt -s nullglob
          for f in out/stripped/bin/*.exe out/stripped/bin/*.dll; do
            base="$(basename "$f")"
            if [ -f "out/full/bin/$base" ]; then
              objcopy --only-keep-debug "out/full/bin/$base" "out/symbols/$base.debug" || true
            else
              objcopy --only-keep-debug "$f" "out/symbols/$base.debug" || true
            fi
            strip --strip-debug "$f" || true
            if [ -f "out/symbols/$base.debug" ]; then
              objcopy --add-gnu-debuglink="out/symbols/$base.debug" "$f" || true
            fi
          done

          echo "---- FULL ----";     find out/full     -maxdepth 4 -type f -print || true
          echo "---- STRIPPED ----"; find out/stripped -maxdepth 4 -type f -print || true
          echo "---- SYMBOLS ----";  find out/symbols  -maxdepth 4 -type f -print || true

      - name: Upload artifact (full symbols)
        uses: actions/upload-artifact@v4
        with:
          name: ghidra-full-windows-msys2-Release
          path: out/full/**
          if-no-files-found: warn
          retention-days: 30

      - name: Upload artifact (stripped)
        uses: actions/upload-artifact@v4
        with:
          name: ghidra-stripped-windows-msys2-Release
          path: out/stripped/**
          if-no-files-found: warn
          retention-days: 30

      - name: Upload artifact (separate .debug symbols)
        uses: actions/upload-artifact@v4
        with:
          name: ghidra-symbols-windows-msys2-Release
          path: out/symbols/**
          if-no-files-found: warn
          retention-days: 30

      # --- Auto-commit compile_commands.json (no-fail if unchanged) ---
      - name: Commit compile_commands.json into repo
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        shell: pwsh
        env:
          TARGET_DIR: compile_commands/windows-msys2
          BUILD_DIR: ${{ env.BUILD_DIR }}
        run: |
          $ErrorActionPreference = "Stop"
          $src = Join-Path $env:GITHUB_WORKSPACE "$env:BUILD_DIR\compile_commands.json"
          if (!(Test-Path $src)) { Write-Host "compile_commands.json not found at $src"; exit 0 }
          $outDir = Join-Path $env:GITHUB_WORKSPACE $env:TARGET_DIR
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          Copy-Item $src (Join-Path $outDir 'compile_commands.json') -Force

          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git config --global --add safe.directory $env:GITHUB_WORKSPACE
          git add "$env:TARGET_DIR/compile_commands.json"
          git diff --cached --quiet
          if ($LASTEXITCODE -ne 0) { git commit -m "[skip ci] update compile_commands.json ($env:TARGET_DIR)"; git push } else { Write-Host "No changes in compile_commands.json; nothing to commit." }
          exit 0

      # --- Sanity check Sonar coordinates before scanning ---
      - name: Check SonarCloud settings
        shell: pwsh
        run: |
          if (-not "$env:SONAR_TOKEN") { Write-Error "SONAR_TOKEN secret is missing."; exit 1 }
          if (-not "$env:SC_ORG")      { Write-Error "SONAR_ORGANIZATION is missing (set in Secrets or Repository Variables)."; exit 1 }
          if (-not "$env:SC_KEY")      { Write-Error "SONAR_PROJECT_KEY is missing (set in Secrets or Repository Variables)."; exit 1 }
          "Using SonarCloud: org='$env:SC_ORG' projectKey='$env:SC_KEY' host='$env:SC_HOST'"

      # SonarCloud scan using compile_commands.json (no wrapper)
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SC_HOST }}
        with:
          args: >
            --define sonar.organization=${{ env.SC_ORG }}
            --define sonar.projectKey=${{ env.SC_KEY }}
            --define sonar.sources=.
            --define sonar.exclusions=**/tests/**,**/.scannerwork/**,**/${{ env.BUILD_DIR }}/**,**/scripts/**,**/cmake-build-**/
            --define sonar.cfamily.compile-commands=${{ env.BUILD_DIR }}/compile_commands.json
            --define sonar.verbose=true
